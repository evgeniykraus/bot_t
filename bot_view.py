import re

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

import controller
from conn import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

kb = ReplyKeyboardMarkup(resize_keyboard=True)
b_menu = KeyboardButton('‚Ñπ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
kb.add(b_menu)


class Form(StatesGroup):
    user_input = State()
    dell_sub = State()
    add_sub = State()


def is_valid(user_input):
    result = re.match("^[–ê-—è]{1,15} [–ê-—è]{1,15} [–ê-—è]{1,15} ((\+7|7|8)+([0-9]){10})$", user_input) is not None
    if not result and len(user_input) <= 12:
        return False
    else:
        return result


def show_subs(array):
    subscriber_list = ''
    count = 1
    for value in array:
        temp = value.split(' ')
        subscriber_list += f'<b>–ö–æ–Ω—Ç–∞–∫—Ç # {count}</b>\n<b>–§–ò–û:</b> {temp[0]} {temp[1]} {temp[2]}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +{temp[3]}\n\n'
        count += 1
    return subscriber_list


def start_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)

    ibf1 = InlineKeyboardButton(callback_data='subscriber_list',
                                text='üìñÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
    ibf2 = InlineKeyboardButton(callback_data='search_subscriber',
                                text='üîé –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞')

    keyboard.add(ibf1, ibf2)

    return keyboard


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!',
                           parse_mode='HTML',
                           reply_markup=kb)


@dp.message_handler(text='‚Ñπ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', state=None)
async def get_menu(message: types.Message):
    keyboard = start_menu()

    await bot.send_message(chat_id=message.from_user.id,
                           text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                           parse_mode='HTML',
                           reply_markup=keyboard)


@dp.callback_query_handler(text='show_start_menu')
async def get_start_menu(callback: types.CallbackQuery):
    keyboard = start_menu()

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                           parse_mode='HTML',
                           reply_markup=keyboard)


@dp.callback_query_handler(text='search_subscriber')
async def get_subs_list_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='cancel_search',
                               text='–ù–∞–∑–∞–¥')

    keyboard.add(ib1)

    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'<b>–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –§–ò–û '
                                f'–∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞</i>',
                           parse_mode='HTML',
                           reply_markup=keyboard)
    await Form.user_input.set()


@dp.message_handler(state=Form.user_input)
async def find_subscriber(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='search_subscriber',
                               text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫')

    ib2 = InlineKeyboardButton(callback_data='show_start_menu',
                               text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    keyboard.add(ib1, ib2)
    async with state.proxy() as proxy:
        proxy['user_input'] = message.text
        result = controller.get_subscriber_data(proxy['user_input'])

        subscriber_list = show_subs(result)

        if subscriber_list:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'{subscriber_list}\n',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()
        elif proxy['user_input'] == '‚Ñπ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
            keyboard = start_menu()
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª!',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()


@dp.callback_query_handler(text='cancel_search', state=Form.user_input)
async def get_start_menu(callback: types.CallbackQuery, state: FSMContext):
    keyboard = start_menu()

    await callback.message.edit_text(text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                                     parse_mode='HTML',
                                     reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(text='cancel_search', state=Form.add_sub)
async def get_start_menu(callback: types.CallbackQuery, state: FSMContext):
    keyboard = start_menu()

    await callback.message.edit_text(text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                                     parse_mode='HTML',
                                     reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(text='subscriber_list')
async def get_subs_list_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='show_start_menu',
                               text='–ù–∞–∑–∞–¥')
    ib2 = InlineKeyboardButton(callback_data='add_contact',
                               text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
    ib3 = InlineKeyboardButton(callback_data='dell_contact',
                               text='–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')

    keyboard.add(ib2, ib3, ib1)
    subscriber_list = show_subs(controller.get_all_subscribers())

    await callback.message.edit_text(f'{subscriber_list}\n',
                                     parse_mode='HTML',
                                     reply_markup=keyboard)


@dp.callback_query_handler(text='cancel_search', state=Form.dell_sub)
async def get_start_menu(callback: types.CallbackQuery, state: FSMContext):
    keyboard = start_menu()

    await callback.message.edit_text(text=f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>',
                                     parse_mode='HTML',
                                     reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(text='add_contact')
async def add_sub_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='cancel_search',
                               text='–û—Ç–º–µ–Ω–∞')

    keyboard.add(ib1)
    await Form.add_sub.set()
    await callback.message.edit_text(f'<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –§–ò–û '
                                     f'–∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</i>\n'
                                     f'<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á +79998887766',
                                     parse_mode='HTML',
                                     reply_markup=keyboard)


@dp.message_handler(state=Form.add_sub)
async def add_subscriber(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='add_contact',
                               text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥')

    ib2 = InlineKeyboardButton(callback_data='show_start_menu',
                               text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    keyboard.add(ib1, ib2)

    async with state.proxy():
        new_subscriber = message.text

        if not is_valid(new_subscriber):
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –§–ò–û '
                                        f'–∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</i>\n'
                                        f'<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á 79998887766',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()
        else:
            result = controller.add_new_sub(new_subscriber)
            if result == -1:
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f'<b>–û—à–∏–±–∫–∞!</b>\n'
                                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ',
                                       parse_mode='HTML',
                                       reply_markup=keyboard)
                await state.finish()
            else:
                new_subscriber = new_subscriber.split(" ")
                await bot.send_message(chat_id=message.from_user.id,
                                       text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n'
                                            f'{new_subscriber[0]} {new_subscriber[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É',
                                       parse_mode='HTML',
                                       reply_markup=keyboard)
                await state.finish()


@dp.callback_query_handler(text='dell_contact')
async def dell_sub_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='cancel_search',
                               text='–û—Ç–º–µ–Ω–∞')

    keyboard.add(ib1)
    await Form.dell_sub.set()
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'<b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</i>',
                           parse_mode='HTML',
                           reply_markup=keyboard)


@dp.message_handler(state=Form.dell_sub)
async def add_subscriber(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)

    ib1 = InlineKeyboardButton(callback_data='dell_contact',
                               text='–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥')

    ib2 = InlineKeyboardButton(callback_data='show_start_menu',
                               text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    keyboard.add(ib1, ib2)

    async with state.proxy():
        res = controller.phone_number(message.text)
        result = re.sub(r"^\+", "", message.text)
        result = re.sub(r"^8", "7", result)
        if res == -1:
            controller.dell_sub(result)
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'<b>–ì–æ—Ç–æ–≤–æ!</b>\n'
                                        f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º <b>{result}</b> –±—ã–ª —É–¥–∞–ª–µ–Ω',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'<b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!</b>\n'
                                        f'–ö–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>{message.text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ',
                                   parse_mode='HTML',
                                   reply_markup=keyboard)
            await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)
